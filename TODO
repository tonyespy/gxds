Background
==========

Format of this file borrowed from the bluez project.

Global
======

- review package structure; compare to edgex-go

  Priority: High

- decide on top-level package name; choices include deviceservice[-go] or device[-go]

  Priority: High

Service Operation
=================

- [consul] if enabled, read config settings from consul

  Priority: High

- [consul] after all dependencies have been verified, and
  initialization finished, register as a service with consul

  Priority: High

- [consul] ensure health mechanism is properly configured/implemented

  Priority: High

- Validate device profiles during auto-import using a schema with
  constraints (e.g. limits on maximum number of device resources,
  commands, ...).

  Priority: Medium

Cache
=======

- Review exported code for all cache objects, and if possible, make them
  use a consistent approach.

  Priority: High

- Implement interfaces for each cache type to allow unit testing.

  Priority: High

- Review for thread safety

  Priority: High

- Review composition of complex data types. Should arrays/maps/slices
  use structs or pointers to structs? If latter, re-factor.

  Priority: High

- [profiles] read existing deviceprofiles from metadata before
  importing new profiles. This requires new code to be added
  to DeviceProfileClient to return the list of existing deviceprofiles.

  Priority: High

- [profiles] re-factor to use a map of deviceprofile instances,
  instead of creating derived sub-objects. The existing code creates
  these derived objects as a result of the addDevice call (made by
  devices cache), there's no AddProfile method which is needed to
  support auto-import of deviceprofiles from YAML files.

  Priority: High

- [profiles] implement size constraints based on settings for both
  local vars and members of the Profile struct.

  Priority: Medium

- [objects] remove caching related logic in this code, keeping any
  for command processing to occur.  It was decided at the Palo Alto
  f2f that the device service SDKs would perform no caching.

  Priority: High

- [devices] add support for generic init and disconnect functions
  when devices are added or removed from the cache. The code checks
  for presence of device commands specified by the configuration
  settings DeviceInitCmd and DeviceRemoveCmd. There also are settings
  for both which specify the args to pass with the command.

  Priority: Medium

REST
====

- implement response formatting logic

- implement service endpoints:
  - /discover

  - /debug/*

- implemenent schedule endpoints:

- implement command 'All':

Readings
========

- implement transforms: implement transforms for both get & puts

Discovery
=========

- dynamically create provisionwatcher instances based on
  configuration settings.

  Priority: Medium

- Re-think whether Scan() should remain part of the ProtocolDriver
  interface or be split into it's own interface. If we do the latter,
  then we either need to add a new parameter to service.Init, or we
  add a function like AddScanHandler.

  Priority: Medium

- implement discovery logic: if discovery endpoint hit, call
  protocoldriver.scan(), process ScanList, and add new devices
  that match any provisionwatchers.

- provisionwatcher init: create default provisionwatchers startup

  Priority: Medium

Scheduling
==========

- default schecule init: create default schedules & schedule events
  on startup.

  Priority: High






